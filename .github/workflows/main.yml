name: Zephyrus CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: zephyrus
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: acumenus
          POSTGRES_SCHEMA: prod
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo_pgsql, mbstring, exif, pcntl, bcmath, gd, zip, dom, curl, libxml, fileinfo, iconv
        coverage: none
        tools: composer:v2
      env:
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
    - name: Update .env Database Configuration
      run: |
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=zephyrus/g' .env
        sed -i 's/CACHE_STORE=.*/CACHE_STORE=file/g' .env
    
    - name: Debug PHP and Composer versions
      run: |
        php -v
        composer -V
        pwd
        ls -la

    - name: Validate composer.json
      run: composer validate

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/composer/files
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Create Composer cache directory
      run: mkdir -p ~/.cache/composer/files

    - name: Install PHP Dependencies
      run: |
        composer config --global github-oauth.github.com "${{ secrets.GITHUB_TOKEN }}"
        composer clear-cache
        composer install --no-ansi --no-interaction --no-scripts --prefer-dist --verbose --optimize-autoloader
    
    - name: Generate key
      run: php artisan key:generate
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: zephyrus
        DB_USERNAME: postgres
        DB_PASSWORD: acumenus
        CACHE_DRIVER: file
    
    - name: Set Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    
    - name: Install Node Dependencies
      run: npm ci
    
    - name: Build Assets
      run: npm run build
    
    # Uncomment when you have tests
    # - name: Run PHP Tests
    #   run: php artisan test
    
    # - name: Run Frontend Tests
    #   run: npm test

  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_environment
    
    steps:
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.PROD_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/Zephyrus
          # Handle potential permission issues with untracked files
          git clean -f -d -n | grep -v ".env" || true  # List files that would be removed (dry run), excluding .env files
          git stash  # Stash tracked changes without including untracked files
          # Clean untracked files that might have permission issues, excluding .env files
          find . -type f -not -path "*/\.git/*" -not -name ".env*" -not -path "*/vendor/*" -not -path "*/node_modules/*" | xargs -r chmod 664 || true
          git pull origin main
          chmod +x deploy-production.sh
          export SUDO_PASSWORD="${{ secrets.SUDO_PASSWORD }}"
          ./deploy-production.sh
