import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { Brain } from 'lucide-react';
import { Icon } from '@iconify/react';
import Panel from '@/Components/ui/Panel';

// View presets for different user roles
const viewPresets = {
  clinical: {
    label: 'Clinical View',
    icon: 'carbon:user-medical',
    nodeCount: 60,
    arcCount: 8,
    parallelismFactor: 30,
    frequencyMetric: 'case',
    durationMetric: 'average'
  },
  operational: {
    label: 'Operational View',
    icon: 'carbon:analytics',
    nodeCount: 80,
    arcCount: 12,
    parallelismFactor: 40,
    frequencyMetric: 'absolute',
    durationMetric: 'median'
  },
  detailed: {
    label: 'Detailed View',
    icon: 'carbon:data-vis-4',
    nodeCount: 120,
    arcCount: 15,
    parallelismFactor: 50,
    frequencyMetric: 'relative',
    durationMetric: 'average'
  }
};

const hospitals = [
  'Virtua Marlton Hospital',
  'Virtua Mount Holly Hospital',
  'Virtua Our Lady of Lourdes Hospital',
  'Virtua Voorhees Hospital',
  'Virtua Willingboro Hospital'
];

const workflows = [
  'Admissions',
  'Discharges',
  'ED to Inpatient',
  'Surgery',
  'Outpatient'
];

const timeRanges = [
  '24 Hours',
  '7 Days',
  '14 Days',
  '1 Month',
  '3 Months'
];

const departments = [
  'All Departments',
  'Emergency',
  'Surgery',
  'Medical/Surgical',
  'ICU',
  'Cardiology',
  'Orthopedics',
  'Oncology',
  'Neurology'
];

const patientTypes = [
  'All Patients',
  'Inpatient',
  'Outpatient',
  'Emergency',
  'Observation',
  'Surgical'
];

const ProcessSelector = ({
    selectedHospital,
    selectedWorkflow,
    selectedTimeRange,
    onHospitalChange,
    onWorkflowChange,
    onTimeRangeChange,
    onShowMetrics,
    onShowIntelligence,
    onResetLayout,
    activeTab,
    showAdvancedFilters = false,
    selectedDepartment = 'All Departments',
    selectedPatientType = 'All Patients',
    onDepartmentChange = () => {},
    onPatientTypeChange = () => {},
    onToggleAdvancedFilters = () => {},
    onToggleComparison = () => {},
    showComparison = false,
    // Process mining specific props
    nodeCount = 80,
    arcCount = 12,
    parallelismFactor = 40,
    onNodeCountChange = () => {},
    onArcCountChange = () => {},
    onParallelismChange = () => {},
    viewMode = 'process-map',
    onViewModeChange = () => {},
    frequencyMetric = 'case',
    onFrequencyMetricChange = () => {},
    durationMetric = 'average',
    onDurationMetricChange = () => {}
}) => {
    // Local state
    const [filtersExpanded, setFiltersExpanded] = useState(showAdvancedFilters);
    const [showProcessMiningSettings, setShowProcessMiningSettings] = useState(false);
    const [selectedPreset, setSelectedPreset] = useState('operational');
    
    // Toggle filters visibility
    const toggleFilters = () => {
        setFiltersExpanded(!filtersExpanded);
        onToggleAdvancedFilters(!filtersExpanded);
    };

    // Toggle process mining settings visibility
    const toggleProcessMiningSettings = () => {
        setShowProcessMiningSettings(!showProcessMiningSettings);
    };

    // Check if we're in a PatientFlow tab
    const isPatientFlowTab = activeTab && activeTab !== 'process-map';
    const isProcessMapTab = activeTab === 'process-map';

    // Apply preset settings
    const applyPreset = (presetKey) => {
        const preset = viewPresets[presetKey];
        setSelectedPreset(presetKey);
        onNodeCountChange(preset.nodeCount);
        onArcCountChange(preset.arcCount);
        onParallelismChange(preset.parallelismFactor);
        onFrequencyMetricChange(preset.frequencyMetric);
        onDurationMetricChange(preset.durationMetric);
    };

    return (
        <div className="space-y-4">
            {/* Main Panel */}
            <Panel title="Process Analysis Controls" dropLightIntensity="strong">
                <div className="p-4 space-y-6">
                    {/* Basic Filters */}
                    <div className="flex gap-4 items-start flex-wrap">
                        <div className="w-96">
                            <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                Hospital
                            </label>
                            <select
                                value={selectedHospital}
                                onChange={(e) => onHospitalChange(e.target.value)}
                                className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                            >
                                {hospitals.map((hospital) => (
                                    <option key={hospital} value={hospital}>
                                        {hospital}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="w-[220px]">
                            <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                Process
                            </label>
                            <select
                                value={selectedWorkflow}
                                onChange={(e) => onWorkflowChange(e.target.value)}
                                className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                            >
                                {workflows.map((workflow) => (
                                    <option key={workflow} value={workflow}>
                                        {workflow}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="flex-1 min-w-[180px]">
                            <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                Time Range
                            </label>
                            <select
                                value={selectedTimeRange}
                                onChange={(e) => onTimeRangeChange(e.target.value)}
                                className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                            >
                                {timeRanges.map((range) => (
                                    <option key={range} value={range}>
                                        {range}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="flex flex-col">
                            <label className="block text-sm font-medium text-transparent select-none">
                                Spacer
                            </label>
                            {/* View Preset Buttons */}
                            <div className="flex gap-2 flex-wrap mb-4">
                                {Object.entries(viewPresets).map(([key, preset]) => (
                                    <button
                                        key={key}
                                        onClick={() => applyPreset(key)}
                                        className={`px-4 py-2 rounded-md shadow-sm flex items-center gap-2 transition-colors ${
                                            selectedPreset === key
                                                ? 'bg-healthcare-primary dark:bg-healthcare-primary-dark text-white border-healthcare-primary-dark'
                                                : 'bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark'
                                        }`}
                                    >
                                        <Icon icon={preset.icon} className="h-4 w-4" />
                                        {preset.label}
                                    </button>
                                ))}
                            </div>

                            {/* Action Buttons */}
                            <div className="flex gap-2 flex-wrap">
                                {!isPatientFlowTab && (
                                    <>
                                        <button
                                            onClick={onShowMetrics}
                                            className="px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark transition-colors flex items-center gap-2"
                                        >
                                            <Icon icon="carbon:chart-line" className="h-4 w-4" />
                                            View Metrics
                                        </button>
                                        <button
                                            onClick={onShowIntelligence}
                                            className="px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark transition-colors flex items-center gap-2"
                                        >
                                            <Brain className="h-4 w-4" />
                                            Process Intelligence
                                        </button>
                                        <button
                                            onClick={toggleProcessMiningSettings}
                                            className={`px-4 py-2 border rounded-md shadow-sm flex items-center gap-2 transition-colors ${
                                                showProcessMiningSettings 
                                                    ? 'bg-healthcare-primary dark:bg-healthcare-primary-dark text-white border-healthcare-primary-dark' 
                                                    : 'bg-healthcare-surface dark:bg-healthcare-surface-dark border-healthcare-border dark:border-healthcare-border-dark hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark'
                                            }`}
                                        >
                                            <Icon icon="carbon:settings-adjust" className="h-4 w-4" />
                                            {showProcessMiningSettings ? 'Hide Analysis Settings' : 'Show Analysis Settings'}
                                        </button>
                                        <button
                                            onClick={onResetLayout}
                                            className="px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark transition-colors flex items-center gap-2"
                                        >
                                            <Icon icon="carbon:reset" className="h-4 w-4" />
                                            Reset Layout
                                        </button>
                                    </>
                                )}
                                
                                {isPatientFlowTab && (
                                    <>
                                        <button
                                            onClick={toggleFilters}
                                            className="px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark transition-colors flex items-center gap-2"
                                        >
                                            <Icon icon="carbon:filter" className="h-4 w-4" />
                                            {filtersExpanded ? 'Hide Advanced Filters' : 'Show Advanced Filters'}
                                        </button>
                                        <button
                                            onClick={() => onToggleComparison(!showComparison)}
                                            className={`px-4 py-2 border rounded-md shadow-sm flex items-center gap-2 transition-colors ${
                                                showComparison 
                                                    ? 'bg-healthcare-primary dark:bg-healthcare-primary-dark text-white border-healthcare-primary-dark' 
                                                    : 'bg-healthcare-surface dark:bg-healthcare-surface-dark border-healthcare-border dark:border-healthcare-border-dark hover:bg-healthcare-surface-hover dark:hover:bg-healthcare-surface-hover-dark'
                                            }`}
                                        >
                                            <Icon icon="carbon:compare" className="h-4 w-4" />
                                            {showComparison ? 'Hide Comparison' : 'Show Comparison'}
                                        </button>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>

            {/* Analysis Settings */}
            {isProcessMapTab && showProcessMiningSettings && (
                <Panel title="Analysis Settings" dropLightIntensity="medium">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-4">
                        {/* Visualization Settings */}
                        <Panel title="Visualization" isSubpanel={true} dropLightIntensity="subtle">
                            <div className="p-4 space-y-4">
                                <div className="flex items-center justify-between">
                                    <span className="text-sm font-medium">Process Map</span>
                                    <div className="flex items-center space-x-2">
                                        <div className={`w-10 h-5 rounded-full p-1 cursor-pointer transition-colors ${viewMode === 'process-map' ? 'bg-healthcare-primary' : 'bg-gray-300 dark:bg-gray-600'}`} onClick={() => onViewModeChange('process-map')}>
                                            <div className={`bg-white dark:bg-gray-200 h-3 w-3 rounded-full shadow-md transform transition-transform ${viewMode === 'process-map' ? 'translate-x-5' : 'translate-x-0'}`}></div>
                                        </div>
                                        <span className="text-sm font-medium">BPMN Model</span>
                                    </div>
                                </div>
                        
                                <div className="space-y-2">
                                    <label className="block text-sm font-medium">Perspective</label>
                                    <select
                                        className="w-full px-3 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                                        value="activities"
                                    >
                                        <option value="activities">Activities</option>
                                        <option value="resources">Resources</option>
                                        <option value="data">Data</option>
                                    </select>
                                </div>
                        
                                <div className="space-y-2">
                                    <label className="block text-sm font-medium">Frequency</label>
                                    <select
                                        className="w-full px-3 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                                        value={frequencyMetric}
                                        onChange={(e) => onFrequencyMetricChange(e.target.value)}
                                    >
                                        <option value="case">Case</option>
                                        <option value="absolute">Absolute</option>
                                        <option value="relative">Relative</option>
                                    </select>
                                </div>
                        
                                <div className="space-y-2">
                                    <label className="block text-sm font-medium">Duration</label>
                                    <select
                                        className="w-full px-3 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                                        value={durationMetric}
                                        onChange={(e) => onDurationMetricChange(e.target.value)}
                                    >
                                        <option value="average">Average</option>
                                        <option value="median">Median</option>
                                        <option value="min">Min</option>
                                        <option value="max">Max</option>
                                    </select>
                                </div>
                            </div>
                        </Panel>
                        
                        {/* Process Mining Settings */}
                        <Panel title="Process Mining" isSubpanel={true} dropLightIntensity="subtle">
                            <div className="p-4 space-y-4">
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <label className="block text-sm font-medium">Case Frequency</label>
                                        <div className="flex items-center space-x-1">
                                            <span className="text-xs">High</span>
                                            <div className="w-16 h-1 bg-gradient-to-r from-blue-500 to-gray-300 rounded"></div>
                                            <span className="text-xs">Low</span>
                                        </div>
                                    </div>
                                    <select
                                        className="w-full px-3 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                                        defaultValue="case-frequency"
                                    >
                                        <option value="case-frequency">Case Frequency</option>
                                        <option value="performance">Performance</option>
                                        <option value="custom">Custom</option>
                                    </select>
                                </div>
                        
                                <div className="space-y-2">
                                    <div className="flex justify-between items-center">
                                        <label className="block text-sm font-medium">Nodes</label>
                                        <span className="text-sm font-medium">{nodeCount}</span>
                                    </div>
                                    <input
                                        type="range"
                                        min="10"
                                        max="200"
                                        value={nodeCount}
                                        onChange={(e) => onNodeCountChange(parseInt(e.target.value))}
                                        className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                                    />
                                </div>
                        
                                <div className="space-y-2">
                                    <div className="flex justify-between items-center">
                                        <label className="block text-sm font-medium">Arcs</label>
                                        <span className="text-sm font-medium">{arcCount}</span>
                                    </div>
                                    <input
                                        type="range"
                                        min="5"
                                        max="50"
                                        value={arcCount}
                                        onChange={(e) => onArcCountChange(parseInt(e.target.value))}
                                        className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                                    />
                                </div>
                        
                                <div className="space-y-2">
                                    <div className="flex justify-between items-center">
                                        <label className="block text-sm font-medium">Parallelism</label>
                                        <span className="text-sm font-medium">{parallelismFactor}</span>
                                    </div>
                                    <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={parallelismFactor}
                                        onChange={(e) => onParallelismChange(parseInt(e.target.value))}
                                        className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                                    />
                                </div>
                            </div>
                        </Panel>
                    </div>
                </Panel>
            )}
            
            {/* Advanced filters for PatientFlow */}
            {isPatientFlowTab && filtersExpanded && (
                <Panel title="Advanced Filters" dropLightIntensity="medium">
                    <div className="flex gap-4 items-start p-4">
                        <div className="w-[220px]">
                            <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                Department
                            </label>
                            <select
                                value={selectedDepartment}
                                onChange={(e) => onDepartmentChange(e.target.value)}
                                className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                            >
                                {departments.map((department) => (
                                    <option key={department} value={department}>
                                        {department}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="w-[220px]">
                            <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                Patient Type
                            </label>
                            <select
                                value={selectedPatientType}
                                onChange={(e) => onPatientTypeChange(e.target.value)}
                                className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                            >
                                {patientTypes.map((type) => (
                                    <option key={type} value={type}>
                                        {type}
                                    </option>
                                ))}
                            </select>
                        </div>
                    
                        {showComparison && (
                            <div className="flex-1">
                                <label className="block text-sm font-medium text-healthcare-text-primary dark:text-healthcare-text-primary-dark">
                                    Comparison Period
                                </label>
                                <select
                                    defaultValue="Previous Period"
                                    className="w-full px-4 py-2 bg-healthcare-surface dark:bg-healthcare-surface-dark border border-healthcare-border dark:border-healthcare-border-dark rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-healthcare-primary focus:border-transparent"
                                >
                                    <option>Previous Period</option>
                                    <option>Same Period Last Year</option>
                                    <option>Custom Period</option>
                                </select>
                            </div>
                        )}
                    </div>
                </Panel>
            )}
        </div>
    );
};

// PropTypes validation for ProcessSelector component
ProcessSelector.propTypes = {
    // Basic props
    selectedHospital: PropTypes.string.isRequired,
    selectedWorkflow: PropTypes.string.isRequired,
    selectedTimeRange: PropTypes.string.isRequired,
    onHospitalChange: PropTypes.func.isRequired,
    onWorkflowChange: PropTypes.func.isRequired,
    onTimeRangeChange: PropTypes.func.isRequired,
    onShowMetrics: PropTypes.func.isRequired,
    onShowIntelligence: PropTypes.func.isRequired,
    onResetLayout: PropTypes.func.isRequired,
    activeTab: PropTypes.string,

    // Advanced filter props
    showAdvancedFilters: PropTypes.bool,
    selectedDepartment: PropTypes.string,
    selectedPatientType: PropTypes.string,
    onDepartmentChange: PropTypes.func,
    onPatientTypeChange: PropTypes.func,
    onToggleAdvancedFilters: PropTypes.func,
    onToggleComparison: PropTypes.func,
    showComparison: PropTypes.bool,

    // Process mining props
    nodeCount: PropTypes.number,
    arcCount: PropTypes.number,
    parallelismFactor: PropTypes.number,
    onNodeCountChange: PropTypes.func,
    onArcCountChange: PropTypes.func,
    onParallelismChange: PropTypes.func,
    viewMode: PropTypes.string,
    onViewModeChange: PropTypes.func,
    frequencyMetric: PropTypes.string,
    onFrequencyMetricChange: PropTypes.func,
    durationMetric: PropTypes.string,
    onDurationMetricChange: PropTypes.func
};

// Export the constants for reuse
export {
    hospitals,
    workflows,
    timeRanges,
    departments,
    patientTypes
};

export default ProcessSelector;
